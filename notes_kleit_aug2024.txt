SAMSUNG TRAINING ON PYTHON FOR KLEIT 2ND YEAR STUDENTS

DAY1 MONDAY 19-08-2024

NOTE: Always download ONLY installer file (.msi file) and then install it. (THIS ONE IS BETTER)
OR
Download ONLY .zip file and extract it.

We created:
	GitHub Account
	HackerRank Account
	CodeChef Account
Those interested can also create:
	* LinkedIn Account
	* StackOverFlow (Start answering the questions once you are confident)
	LeetCode
	HackerEarth

Steps
1. Create a folder named "software" inside C drive
2. Download Python from python.org
	Installer file (.msi) is downloaded
	Create a folder inside C:\software
	Cut and paste it into C:\software\python folder
	Now double click the installer and install
	(To know if python is installed, search for idle Interpreter App in windows search. In the command prompt, run: 
	$ python --version
	$ pip --version
	O/P:
	pip 24.1.1 from C:\Users\ASUS\AppData\Local\Programs\Python\Python311\Lib\site-packages\pip (python 3.11)
	
	Thus, when we install Python, we get the Pre-defined Modules, the Python interpreter which included the compiler and runtime machine (PVM), idle App to run python scripts, python and pip CLI (command line interface)
	
	Create your learning folder
		D:/aditya_learning/python
	
	Download notepad++
	
	Download MySQL
	https://www.mysql.com/downloads/
	Scroll down and click on: MySQL Community (GPL) Downloads Â»
	CLick on: MySQL Installer for Windows
	Click on: Windows (x86, 32-bit), MSI Installer 	8.0.39 	303.6M
	
	INSTALLATION PROCESS:
	Choosing the setup File: (check box) Full -> Click Next
	Installation: Click Execute -> Click Next
	Product Configuration: Click Next
	Type and Networking: Do not change the settings (remember the port number 3306) Click Next
	Authentication Method: (No changes) Click Next
	Accounts and Rolls: Add the Root Password as "root123" -> Click Next
	Windows service: Click Next
	Server File Permissions: Click Next
	Apply Configurations: Click Execute -> Click Finish
	Product Configuration: Click Next
	MySQL Router Config: Click Finish
	Product Configuration: Click Next
	Connect to Server: Enter password and Click Check (Connection succeeded must appear)
	Apply Configurations: Click Execute -> Click Finish
	Product Configuration: Click Next
	Installation Complete: 
----------------------------------------------------
DAY2 TUESDAY 20-08-2024

Steps to create github Repo:
	Login to your github account
	Click on + (right top corner)
	Click Create New Repository
	Give name to your new Repo: "python_aug2024"
	Make it public Repo (by default it will be public)
	Click the Checkbox "add readme file"
	Click Create button
	
Steps to create PAT (Personal Access Token)
	Click on your profile Photo (Right Top corner) -> next page
	Click Sttings (Down in the list) -> next page
	Sroll down and Click Developer Settings -> next page
	Click PAT -> Click PAT classic -> next page
	Click PAT -> Select Classic PAT
	In the list, slect -> Repo, Write Packages and delete packages and Click Create button
	Copy the PAT and save it in some Safe place
	
Steps to Sync our Git Repo to our local machine:
	Copy the URL of your git Repo
	Add '@' symbol before 'github' in the URL
	Add the PAT before the '@' in the modified URL
	Now run the Command: git clone <URL with PAT>
	You should get the Repo folder in your system/laptop
	Copy the necessary files and folders into your Repo folder
	
Steps to Sync Local Repo with Cloud Repo:
	1. Click on +  (stage the changes)
	2. Add the relevant message in message box and click Commit
	3. Click Sync and Click Ok

MAKE SURE YOU CONFIGURE YOUR USER.NAME AND USER.EMAIL IN GIT:
	$ git config --global user.name "neelmyna"
	$ git config --global user.email "nithincheeta@email.com"
------------------------------------------------------
p1.py
# Assign a number into a variable and check if the number is Even.
'''
Multi Line Comment
'''
my_number = 452

if my_number % 2 == 0:
    print(my_number, ' is an Even number')
----------------------------
p2.py
# Read a number from the user and check if it is an Even number or not.

# To read data from the console, we can use input(). However the input() always reads only a string as usual with all other languages.

# We must 1st cast(convert) the string into a number(specifically an int)
# The input(), not just reads a string but also can print a string
my_number = int(input('Enter a number to check if it is Even or not: '))

# To check the data-type of a variable use type()
print(type(my_number))

if my_number % 2 == 0:
    print(my_number, 'is an Even number')
else:
    print(f'{my_number} is not an Even number')

-------------------------------------------------
p3.py
'''
Accept a number as input, say X and define a logic to get the output say Y. The Input can be only 0 or 1 and the output must be 1 if input is 0 and viceversa.
Do not use Boolean Algebra.
'''

X = int(input('Enter the input number(0 or 1 Only): '))

# Check if the i/p is valid

Y = 1 - X
print(f'Input number = {X}, Output Number = {Y}')

'''
# if X == 0 or X == 1:
if X >= 0 and X <= 1:
    # solution
    pass
else:
    # print invalid input
    pass
'''
-----------------------------------------
p4.py

# Program to Accept 3 distinct numbers and find smallest among them.

input_num1 = int(input('Enter  first number: '))
input_num2 = int(input('Enter second number: '))
input_num3 = int(input('Enter  third number: '))

# check if valid input

if input_num1 < input_num2 and input_num1 < input_num3:
    print(f'{input_num1} is smallest')
elif input_num2 < input_num3:
    print(f'{input_num2} is smallest')
else:
    print(f'{input_num3} is smallest')
---------------------------------------
In the case of AND, put that condition 1st which has highest probability to fail.
c1 and c2 and c3 ...... and c10
	do this job-1
In the case of OR, put that condition 1st which has highest probability to succeed.
c1 or c2 or c3 or c4
---------------------------------------------
if avg_score >= 0 and avg_score <= 49:

if avg_score <= 49 and avg_score >= 0:

The above stmt can also be written as:

if avg_score > -1 and avg_score < 50:

Relational Operators:
> < >= <= == !=

https://github.com/neelmyna/python_kleit2024

p6.py
Program to check if the alphabet is uppercase

p7.py
Program to check if a number is Perfect Square

p8.py
Program to check if user given year is a Leap year.

p9.py (Loop)
Program to Print Math table of a number

p10.py
Program to check if the alphabet is Vowel or Consonant
-------------------------------------
day3
loops, array and string problem solving and pdb
day4
python built in DS and pdb
Hacker Rank problem solving
day5
mysql DB
day6
DB connectivity and project using python
day7
assessment and left overs
day8
numpy
day9
numpy and pandas
day10
numpy, pandas and matplotlib
day11
problem solving on numpy, pandas and matplotlib
day12
mini project and final assessment
-------------------------------------------------
DAY3 WEDNESDAY 21-08-2024

range()

range(number) with 1 Arg
Here the default start value is 0 and goes upto number-1 with a default increment of 1
range(5) 0 .... 4
[0, 5)

range(startNumber, endNumber) with 2 Args
Here the start value is startNumber and goes upto endNumber-1 with a default increment of 1
range(10, 20)
Starts from 10 and goes upto 19
[10, 20)

range(startNumber, endNumber, increment) with 3 Args
Here the start value is startNumber and goes upto endNumber-1 with the given increment
range(10, 40, 3)
10, 13, 16, 19, 22, 25, 28, 31, 34, 37

range(40, 25, -2)
Starts from 40 goes upto 11 with increment of -2 or decrement of 2.
40, 38, 36, 34, 32, 30, 28, 26

[10, 20]
Closed Interval where end points are included
num >= 10 and num <= 20

(30, 50)
Open Interval, where end points are excluded
num > 30 and num < 50

[25, 50)
Right Open
num >= 25 and num < 50

# p9 Program to Print Math table of a number

input_num = int(input('Enter a number to print its Math table: '))

for i in range(1, 16):
    #print(input_num, '*', i, '=', input_num*i)
    print('%02d * %02d = %03d'%(input_num, i, input_num*i))
-----------------------------------------------------
p11.py
Program to Find Sum of digits of a number
p12
Program to Find count of digits of a number
p13
Program to find biggest (smallest) digit in a number
p14
Program to find 2nd smallest digit in a number
p15
Program to find Sum of even(odd) digits in a number
p16
Program to reverse a number
p17
Program to Find Odd(Even) placed digits in a number
p18
Program to Find Odd placed Even digits in a number
p19
Program to print the Right angled Triangle of N lines
*
**
***
****
*****
p20
Program to print the Equi Lateral Triangle of N lines
    *
   ***
  *****
 *******
*********
p21
Program to print a Hollow Square of N lines
p22
Program tp print X shape of N lines
p23
Program to Print X shape inside Hollow Square
p24
Check if a number is Prime
p25
Assume 1 and 2 are 1st 2 terms of the series and print the 1st N term of Fibo series (HemaChandra numbers)
p26*
Find the Nth Prime number
p27*
Find Nth Fibo term (assume 1 and 2 as 1st 2 terms)
p28*
Print Prime numbers between M and N (M < N)
p29
Find sum of the series: n + n(2) + n(3) + ..... m terms
p30
Find sum of the series: 1 - n + n2 - n3 .... m terms
p31*
Find sum of the sries: n - n2/3 + n4/5 - n8/7 .... m terms (1<m<10)
p32*
Find Factorial of a number using rescursive function
p33
Find Nth term of the series:
1 2 2 3 3 5 5 7 8 11 13 13
------------------------------------------------------
HOW TO SOLVE A PROBLEM:

1. Understand the problem statement. Note down the I/P and the required information. Isolate and discard the unwanted information and data if any. Recognise what should be the O/P

Outcome:
We get to know the exact I/P and the O/P and the direct question.

2. Find the solution using Trial and Error method or if you know any Mathematical formula to solve the problem or using any specific method. Progragramitical solution is not required at this step.

Outcome: We know a possible solution for the giveen problem.

3. Write the Algorithm for the solution we found
An Algorithm is step by step procedure to solve a problem
Every step must be atomic (must solve only one problem at at time)
Every step must be Finite and unambigious.
Outcome: Exact solution with a particular efficiency is built.

4. Write the pseudocode (Fake code)
Advantage: No need of facing the burden of syntax.
Outcome: A solution that looks almost like a code is ready.

5. Code it (Translate the pseudocode in a particular language syntax)
Outcome: The Code is ready

6. Debug the solution, Optimize the solution and apply the code for necessary constraints.
-----------------------------------------
important Math functions:

floor()
Simply truncate the decimal part and the integer you get is the result
floor(7.0) is 7
floor(7.0999) is 7

ciel()
If the decimal part is anything other than 0, then jump to the next descrete/integer number
ciel(7.0) is 7
ciel(7.001) is 8
ciel(7.999) is 8

round()
round(7.0) is 7
round(7.4999) is 7
round(7.5) is 8
round(7.9999) is 8
----------------------------------------
p7
1.  Done

2. Solution
40   6.4   6   36
25   5.0   5   25
50   7.1   7   49

3. 
Algorithm
Read input_number
root_num = root(input_number)
root_num = floor(root_num)
product = root_num * root_num
if product == input_number then
    print input_number is P S
else
    print input_number is not a P S

'''
Read input_number
root_num = root(input_number)
root_num = floor(root_num)
product = root_num * root_num
if product == input_number then
    print input_number is P S
else
    print input_number is not a P S
'''
import math

input_num = int(input('Enter a number to check if it is Perfect Square: '))
root_number = input_num ** 0.5
# root_number = math.sqrt(input_number)
root_number = math.floor(root_number) # int(root_number)
if root_number * root_number == input_num:
    print(f'{input_num} is a Perfect Square')
else:
    print(f'{input_num} is not a Perfect Square')
--------------------------------------------------
OPERATORS:
Arithmetic Operators:
+ - * / % ** //

I/P are numbers
O/P is number
All are binary operators (takes 2 operands)
Infix notation is used (place the operator inbetween operands)
5 + (-8)
5 + 7.88
When performing any Arithmetic operation, the DT of both the operands must be same.
All the operators except ** has Left to Right Associtivity.
x + y
Here, the value of x is feteched 1st and then y
x + y - z
Here, x+y is performed 1st
However, if the precedence of operator is higher then, it is performed 1st even if the operation comes later in the expression.
x - y % z
Here, y % z is performed 1st, because % has higher precedence than minus
----------------------------------------
RELATIONAL OPERATORS: > < >= <= == !=
I/P are numbers
O/P is Boolean
Infix notation
Left to right associtivity

------------------------------------------
LOGICAL OPERATORS: and or not (C/C++: & && | || !)
I/P are Boolean value
O/P is Boolean
Infix notation (binary operators)
prefix notation (unary operator)
Example: not variable
-----------------------------------
southern_capital_cities = {chennai, tiruvanantapuram, panjim, bengaluru, hyderabad}

cities is correct
capital_cities is more correct
southern_capital_cities is perfect (Most specialized)
-------------------------------------------------
p14

N=67329
s2=9
s1=9
loop_itr=1
	d=9
	N=6732
loop_itr=2
	d=2
	s1=2
	N=673
loop_itr=3
	d=3
	N=67
	s2=3
loop_itr=4
	d=7
	N=6
loop_itr=5
	d=6
	N=0
# p14 Find 2nd smallest digit in a number
'''
Read N
small_digit = 9
smallest_digit = 9
Until N has digits
    fetch last digit into D
    remove the unit place digit from N
    if D < smallest_digit then:
        smallest_digit = D
    if D > smallest_digit and D < small_digit:
        small_digit = D
print small_digit as result 

'''
input_number = int(input('Enter a number to find 2nd smallest digit in it: '))

temp_number = input_number
small_digit = 9
smallest_digit = 9
while input_number != 0:
    digit = input_number % 10 # fetch last digit
    input_number = input_number // 10 #remove last digit
    if smallest_digit > digit:
        small_digit = smallest_digit
        smallest_digit = digit
    elif digit < small_digit:
        small_digit = digit
print(f'2nd smallest digit in {temp_number} is {small_digit}')
-----------------------------------------------------
DAY4 THURSDAY 22-08-2024

Built In Functions in Python
len()
min()
max()
sorted()
type()
sum()

string class in Python
my_name = 'chandramoulehwar'

print(my_name.upper()) #prints the string in uppercase. The original string is not modified(because strings are immutable)
print(my_name.capitalize())#Only 1st char is upper
print(len(my_name))
print(my_name.endswith('war'))
print(my_name.endswith('kar'))
print(my_name.startswith('Chandra'))
print(my_name.count('a'))
print(my_name.count('r', 10))
print(my_name.count('a', 3, 15))
print(my_name.find('puram'))
-----------------------------------------
What is pass in Python?
To skip the body of a block (if block, loop block, function block)

for i in range(10, 20):
	pass
	
What is None in Python ?
None is similar to null of Java where it represents no value or emptyness.

For example, the print() function in Python returns nothing, which is technically represented as None

for i in range(10):
	print(i, end=' ')
	i = i+1 # i++

O/P: 0 2 4 6 8  (WRONG)
O/P: 0 1 2 3 4 5 6 7 8 9 (CORRECT)

Why ++ and -- are not available in Python?
Why there is no implicit cast in Python?
Why there is no Function Overloading in Python?
-------------------------------------------------
my_name = 'tiruvanantapuram'
print(my_name.find('puram'))
print(my_name.find('ananta'))
print(my_name.find('trivandrum'))
print(my_name.find('ananta', 5))
print(my_name.find('ananta', 5, 10))
print(my_name.find('ananta', 5, 11))
print(my_name.index('d'))
print(my_name.find('a', 6))
-------------------------------------------
In Python, though the string objects are immutable, we can index them, i.e., strings are ordered.

my_str = 'siddharoodha'

print(my_str[0])
print(my_str[-1])
print(my_str[2])
print(my_str[-2])
print(my_str[-12])
print(my_str[11])
print(my_str[-13])
-----------------------------------------
String Slicing:
my_str = 'siddharoodha'

print(my_str[:])
print(my_str[::])
print(my_str[1:6])
print(my_str[2:9:2])
print(my_str[1:16])
print(my_str[:9:-1])
print(my_str[9:5:-1])
print(my_str[::-1])
------------------------------
my_str = 'siddharoodha'
print(my_str.index('a'))
print(my_str.find('a'))
------------------------------
my_function(val1, val2) # We must send only 2 values to this function

num1 = 40
num2 = 60
print('Before Swapping, Num1=' + str(num1) + ', Num2=' + str(num2))
num1 , num2 = num2, num1
print('After Swapping, Num1=' + str(num1) + ', Num2=' + str(num2))
print(num3)  NameError , because num3 is not defined
-------------------------------------------------------
Functions in Python:
def my_function():
    print('From my function')

my_function()
----------------
def my_function(num1, num2):
    return num1 + num2

sum = my_function(10, 20)
print(f'Sum = {sum}')
---------------------------
Default Args:

def my_function(num1 = 70, num2 = 90):
    return num1 + num2

sum1 = my_function(10, 20)
print(f'Sum = {sum1}')

sum2 = my_function(25)
print(f'Sum = {sum2}')

sum3 = my_function()
print(f'Sum = {sum3}')
------------------------------
Named Arguments:
def my_function(num1 = 70, num2 = 90):
    print(f'Num1={num1}, Num2={num2}')
    return num1 + num2

sum1 = my_function(num2 = 10, num1 = 20)
print(f'Sum = {sum1}')
----------------------------
Var Arg Function
def my_function(*numbers):
    print(numbers)
    print(sum(numbers), '\n')

my_function(7)
my_function(2, 3, 5, 7)
my_function(11, 19)
my_function()
-------------------------------------
p26*
Find the Nth Prime number
p27*
Find Nth Fibo term (assume 1 and 2 as 1st 2 terms)
-----------------------------------------
DAY6 SATURDAY 24-08-2024

p1.py
Connecting and disconnecting DB

import pymysql

def connectToDb():
    connectionObj = pymysql.Connect(
        host='localhost', port=3306, user='root', password='Root123', db='nithin_db', charset='utf8'
    )
    print('DB connected')
    return connectionObj    

def disconnectDb(connectionObj):
    connectionObj.close()
    print('DB disconnected')

def my_app():
    try:
        connection = connectToDb()
    except:
        print('DB connection failed')
    else:
        disconnectDb(connection)

my_app()
---------------------------------------------------
p2.py
Creating a table in the DB via Python

import pymysql

def connectToDb():
    connectionObj = pymysql.Connect(
        host='localhost', port=3306, user='root', password='Root123', db='nithin_db', charset='utf8'
    )
    print('DB connected')
    return connectionObj    

def disconnectDb(connectionObj):
    connectionObj.close()
    print('DB disconnected')

def createTable():
    query = 'create table IF NOT EXISTS students(id int primary key auto_increment, name varchar(32) not null);'
    try:
        conn = connectToDb()
        my_cursor = conn.cursor()
        my_cursor.execute(query)
        my_cursor.close()
    except:
        print('Table creation failed')
    else:
        disconnectDb(conn)

createTable()
----------------------------
def deleteTable():
    query = 'drop table if exists %s ;'
    table_name = input('Enter table to be deleted: ')
    try:
        conn = connectToDb()
        my_cursor = conn.cursor()
        my_cursor.execute(query, table_name)
        print(f'{table_name} table deleted')
		conn.commit()
        my_cursor.close()
    except Exception as e:
        print('Table deletion failed')
        print(e)
    else:
        disconnectDb(conn)

deleteTable()
----------------------------------
def insertRow():
    query = 'insert into students(name) values(%s)';
    name = input('Enter student name: ')
    try:
        conn = connectToDb()
        my_cursor = conn.cursor()
        my_cursor.execute(query, name)
        conn.commit()
        print('Row inserted')
        my_cursor.close()
        disconnectDb(conn)
    except:
        print('Row insertion failed')

insertRow()
-------------------------------------
5 MOST IMPORTANT OPERATIONS THAT WE PERFORM ON DB ARE CALLED AS "CRUD operations".

The 5 CRUD operations are:
insert one row
delete one row
update one row
select/serach one row
list all rows

C means create (insert one row)			post
R means read/retrieve (search one row)	get
U update(update one row)				put
D delete (deleted one row)				delete

RESTFul API EndPoints (post, get, put, delete)

insert row -> post -> create()
list rows -> get -> find()
search one row -> get ->findById()
update row -> put -> findByIdAndUpdate()
delete row -> delete -> findByIdAndDelete()

insert into students(name, branch, semester) values('mohit', 'cse', 5)

select * from students;

select * from students where id = 5;

http://localhost:3306/
Home page

API EndPoint: get
http://localhost:3306/
Read all rows

API EndPoint: put
http://localhost:3306/:id
update one row
NEED THE OBJECT TO BE PASSED

API EndPoint: get
http://localhost:3306/:id
search one row

API EndPoint: delete
http://localhost:3306/:id
delete one row

API EndPoint: post
http://localhost:3306/
insert one row
NEED THE OBJECT TO BE PASSED
---------------------------------------
def searchRow():
    query = 'select * from students where id = %s'
    student_id = input('Enter Id of the student to be searched: ')
    try:
        conn = connectToDb()
        my_cursor = conn.cursor()
        count = my_cursor.execute(query, student_id)
        if count == 0:
            print(f'Student with id={student_id} not found') 
        else:
            student_row = my_cursor.fetchone()
            print('Student details = ', str(student_row))
        my_cursor.close()
    except Exception as e:
        print('Table deletion failed')
        print(e)
    else:
        disconnectDb(conn)

searchRow()
-----------------------------
def readAllRows():
    query = 'select * from students;'
    try:
        conn = connectToDb()
        my_cursor = conn.cursor()
        count = my_cursor.execute(query)
        if count == 0:
            print(f'No Student records found') 
        else:
            student_rows = my_cursor.fetchall()
            print('%-3s %s'%('ID', 'NAME'))
            print('-----------------')
            for student in student_rows:
                #print(str(student))
                print('%-3d %s'%(student[0], student[1]))
            print('-----------------')
        my_cursor.close()
    except Exception as e:
        print('Read All Rows failed')
        print(e)
    else:
        disconnectDb(conn)

readAllRows()
-------------------------------------
def updateRow():
    query = 'update students set name = %s where id = %s'
    name = input('Enter name to be updated: ')
    id = input('Enter Id of the student to update record: ')
    try:
        conn = connectToDb()
        my_cursor = conn.cursor()
        count = my_cursor.execute(query, (name, id) )
        if count == 0:
            print(f'Student with id={id} not found') 
        else:
            print('Row updated')
        conn.commit()
        my_cursor.close()
    except Exception as e:
        print('Table deletion failed')
        print(e)
    else:
        disconnectDb(conn)

updateRow()
-----------------------------------------------------
MySQL is one of the RDBMS
DB -> Tables -> Rows -> cell data
MongoDB is Document based DB
DB -> Collections -> documents -> key:pairs

Level-2:
gaming_club

members
id, name, wallet_balance, phone_number, adhaar_number, active

games
id, name, price_per_player, number_of_players, duration, description

member_recharges
id, amount, date, member_id

transactions
id, date, member_id, game_id, amount

collections
id, date, amount

OPERATIONS:
1. 
--------------------------------------------------
Template of each CRUD operation done via Python programming:

Steps:
1. Connect to DB (connection object)
2. create cursor object
3. Build the query string
4. Read data from user
5. execute the query
	5a. Process the Result Set
6. close the cursor object
7. close the conn object
---------------------------------------------------
25%
1/4 or .025

50%  	0.5 

100% 	1


Take 5 questions
-1.25
0

-0.75 + 2 = 1.25
----------------------------------------------
MCSR and MCMR
More Correct Answer
Negative marking
Ways of answering
----------------------------------------------
Company Certifications 
Internships
Course + certification (nptel)
------------------------------------------------
PYTHON LIST:

collection of data
stored in contigious memory locations
Unlike C/C++/Java/C# Arrays, Python list can have data of different types
Lists are Ordered (We can do indexing)
Lists are mutable
Lists can have duplicate data
Lists can be sliced
Memory efficient because data can be deleted.
Memory inefficient if lists are too big.
Time inefficient DS for internal maintainance
High time efficient for look-up.
----------------------------------------------
List methods:
append() add element at rear
insert() add element at specific index
pop() 	 remove last element
remove() removes the 1st occurance of matching element
del list[index]
del list
clear()	 

my_list = []
list2 = [2, 5, 8, 9]
list3 = list(list2)
list4 = [4, 7, 3, 0]

list2.extend(list4)
print(list2)
list2[:4] = my_list
print(list2) # [4, 7, 3, 0]
my_list = list2.copy() # [4, 7, 3, 0] is copied
print(my_list)
my_list[0] = 14
print(list2)
print(my_list)
----------------------------------------------
list1 = [2, 5, 9, 20, 3, 45, 11]
list2 = [2, 5, 8, 9]
list3 = list(list2)
list4 = [4, 7, 3, 0, 1, 6]

if list1 > list4:
    print('list1 is big')
else:
    print('list4 is big')

print(f'Max    = ', max(list1))
print(f'Min    = ', min(list1))
print(f'Length = ', len(list1))
print(f'Sum    = ', sum(list1))
print(f'Count of 2 = ', list1.count(2))
list1.sort()
print(f'Sorted list = ', list1)
----------------------------------------------
list2 = ['abc', 5, 'xyz', 10]
print(list2)
list2.sort() # Error
print(list2)
----------------------
list2 = [(2, 5), {3, 4, 5}, {2:'a', 5:'b'}, 'abc', 5]
print(list2)
list2.sort() # Error
print(list2)
--------------------------
List Comprehension

list1 = [element for element in range(10, 30, 2)]
print(list1)


split() method

The Split() splits the string into pieces upon the DELIMETER. The default delimeter is space.
We can specify the delimeter.

list2 = [element for element in input().split()]
print(list2)
-----------------
list2 = [int(element) for element in input().split()]
print(list2)
-----------------
list2 = [float(element) for element in input('Enter numbers seperated by @: ').split('@')]
print(list2)
---------------------
list2 = [int(element) for element in input('Enter numbers seperated by @: ').split('@')]
print(list2)

I/P: 4@2.5@3
ValueError for split() data
--------------------------------------
map function()

def my_function(some_list):
    some_list.remove(10) # removes 1st occurance of 10
    some_list.insert(1, 25)
    some_list.append(50)

print('Enter space separated numbers')
list1 = list(map(int, input().split()))
print(list1)
my_function(list1)
print(list1)
-------------------------------
check_ps(NUMBER)
	root = int(NUMBER ** 0.5)
	if root * root == NUMBER then
		return true
	return false

count_perfect_squares(NUMBERS)
	COUNT = 0
	for each NUMBER in NUMBERS do:
		if check_ps(NUMBER)
			COUNT = 0
	return COUNT

DRIVER/USER CODE
	Read N
	create empty list say, NUMBERS
	count_of_ps = count_perfect_squares(NUMBERS)
	print count_of_ps as O/P
------------------------------------------------
find_sum_of_odd_elements(NUMBERS)
	SUM = 0
	for i from 0 to size_of(NUMBERS)-1 do
		if i % 2 == 0 then
			SUM += NUMBERS[i]
	return SUM

Driver Code:
	Read N
	Read N element of the list NUMBERS
	SUM = find_sum_of_odd_elements(NUMBERS)
	if SUM < 0:
		print: server-1 deallocated math.abs(SUM) units of memory
	else:
		print: server-1 allocated SUM units of memory
------------------------------------------
DAY7 TUESDAY 27-08-2024

ALGORITHMS:
Linear Search
Binary Search
Bubble Sort
Insertion Sort
Quick Sort

LINEAR SEARCH:
-> In a list of elements, we may have search for a specific element.

-> If we have to find the frequency of an element in a list, then note that, we must always access all elements of the list.

-> In the problems such as, finding smallest or biggest elements, counting the elements, finding sum of elements, in all these examples, we must always access all elements of the list.

-> However, in Sequential (Linear) search, we just check the occurance/presence of the element in the list.

We can start the search from any end.
Possibilities:
	-> If the element is found in the very 1st position, then we say that the element is found after 1 unit of time (one look up).
	This is called as Big-Oh(1) represented as O(1)
	This is the Best Case Efficiency (BCE)
	-> Worst case scenario is when the search element is:
		1. not found in the list
		2. found at last position in the list
	In both these scenarios, we have N searchs (where N is the number of elements in the list)
	Thus, the the wrost case efficiency (WCE) is O(n)
	-> The average case scenario is when the search element is found at mid of the list. In such a case, the ACE is O(n)
	
Big-Oh Notation:
	It is used usually to find WCE
	It gives us the efficiency in terms of N (size of the I/P)
	It considers N to be very big
	It gives not the exact efficiency, but/rather its purpose is to tell us in what order the algorithm is. Example, O(1), n, Log(n), n-square, Factorial(n), sqrt(n), 2-power-n
Linear Search Efficiencies:
BCE O(1)
ACE O(n)
WCE O(n)
	
def linear_search(names, search_name):
    for i in range(len(names)):
        if names[i] == search_name:
            return i
    return -1

n = int(input('Enter input size: '))

names = []
print(f'Enter the {n} names')
for i in range(n):
    names.append(input())

print('The input data is \n', names)
search_name = input('Enter the search name: ')

index = linear_search(names, search_name)
if index == -1:
    print(f'{search_name} was not found in the list')
else:
    print(f'{search_name} was found at position {index+1}')
-----------------------------------------
n = int(input('Enter input size: '))

students = dict()
print(f'Enter the {n} Student IDs and Names')
for i in range(n):
    student_id = int(input())
    name = input()
    students[student_id] = name

print('The input data is \n', students)
search_id = int(input('Enter the student Id: '))

try:
    name = students[search_id]
    print(f'Student with Id {search_id} name is {students[search_id]}')
except KeyError:
    print(f'Student with id {search_id} was not found in the list')
except:
    print('Some Error occured while searching')
--------------------------------------
Binary Search:

Algorithm:

input_list = []
search_element = 145
start_index = 0
end_index = len(input_list)-1

while start_index <= end_index:
	mid_index = (start_index + end_index) // 2
	if input_list[mid] == search_element:
		return mid_index
	else if search_element < input_list[mid_index]:
		end_index = mid_index-1
	else
		start_index = mid_index+1
		
Let the number of iterations be X

n    n/2    n/4     n/8 ........ 8    4     2    1  

n = 2(X-1)
n = 2(X)
X = Log(n)
--------------------------------
os = 'hubballi'

rs1 = 'ballihub'
rs2 = 'llihubba'
rs3 = 'lilabahu'

ts = 'ballihubballihub'
----------------------------------
INSERTION SORT:
12  3  15  8  1  15  4
12
3  12  15  


4
12
3  12
3  8  12
3  5  8  12
3  5  8  12  15
2  3  5  8  12  15

2  3  5  8  12  15
2
2  3  5  8  12  15

for i in range(len(a)):
	b[i] = a[i]

23  19  17  13  11  7  5  3  2

def injsertion_sort(array)
	for i in range(1, len(array)):
		element = array[i]
		j = i-1
		while j >= 0 and element < array[j]:
			array[j+1] = array[j]
			j = j-1
		array[j+1] = element
