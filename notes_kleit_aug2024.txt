SAMSUNG TRAINING ON PYTHON FOR KLEIT 2ND YEAR STUDENTS

DAY1 MONDAY 19-08-2024

NOTE: Always download ONLY installer file (.msi file) and then install it. (THIS ONE IS BETTER)
OR
Download ONLY .zip file and extract it.

We created:
	GitHub Account
	HackerRank Account
	CodeChef Account
Those interested can also create:
	* LinkedIn Account
	* StackOverFlow (Start answering the questions once you are confident)
	LeetCode
	HackerEarth

Steps
1. Create a folder named "software" inside C drive
2. Download Python from python.org
	Installer file (.msi) is downloaded
	Create a folder inside C:\software
	Cut and paste it into C:\software\python folder
	Now double click the installer and install
	(To know if python is installed, search for idle Interpreter App in windows search. In the command prompt, run: 
	$ python --version
	$ pip --version
	O/P:
	pip 24.1.1 from C:\Users\ASUS\AppData\Local\Programs\Python\Python311\Lib\site-packages\pip (python 3.11)
	
	Thus, when we install Python, we get the Pre-defined Modules, the Python interpreter which included the compiler and runtime machine (PVM), idle App to run python scripts, python and pip CLI (command line interface)
	
	Create your learning folder
		D:/aditya_learning/python
	
	Download notepad++
	
	Download MySQL
	https://www.mysql.com/downloads/
	Scroll down and click on: MySQL Community (GPL) Downloads Â»
	CLick on: MySQL Installer for Windows
	Click on: Windows (x86, 32-bit), MSI Installer 	8.0.39 	303.6M
	
	INSTALLATION PROCESS:
	Choosing the setup File: (check box) Full -> Click Next
	Installation: Click Execute -> Click Next
	Product Configuration: Click Next
	Type and Networking: Do not change the settings (remember the port number 3306) Click Next
	Authentication Method: (No changes) Click Next
	Accounts and Rolls: Add the Root Password as "root123" -> Click Next
	Windows service: Click Next
	Server File Permissions: Click Next
	Apply Configurations: Click Execute -> Click Finish
	Product Configuration: Click Next
	MySQL Router Config: Click Finish
	Product Configuration: Click Next
	Connect to Server: Enter password and Click Check (Connection succeeded must appear)
	Apply Configurations: Click Execute -> Click Finish
	Product Configuration: Click Next
	Installation Complete: 
----------------------------------------------------
DAY2 TUESDAY 20-08-2024

Steps to create github Repo:
	Login to your github account
	Click on + (right top corner)
	Click Create New Repository
	Give name to your new Repo: "python_aug2024"
	Make it public Repo (by default it will be public)
	Click the Checkbox "add readme file"
	Click Create button
	
Steps to create PAT (Personal Access Token)
	Click on your profile Photo (Right Top corner) -> next page
	Click Sttings (Down in the list) -> next page
	Sroll down and Click Developer Settings -> next page
	Click PAT -> Click PAT classic -> next page
	Click PAT -> Select Classic PAT
	In the list, slect -> Repo, Write Packages and delete packages and Click Create button
	Copy the PAT and save it in some Safe place
	
Steps to Sync our Git Repo to our local machine:
	Copy the URL of your git Repo
	Add '@' symbol before 'github' in the URL
	Add the PAT before the '@' in the modified URL
	Now run the Command: git clone <URL with PAT>
	You should get the Repo folder in your system/laptop
	Copy the necessary files and folders into your Repo folder
	
Steps to Sync Local Repo with Cloud Repo:
	1. Click on +  (stage the changes)
	2. Add the relevant message in message box and click Commit
	3. Click Sync and Click Ok

MAKE SURE YOU CONFIGURE YOUR USER.NAME AND USER.EMAIL IN GIT:
	$ git config --global user.name "neelmyna"
	$ git config --global user.email "nithincheeta@email.com"
------------------------------------------------------
p1.py
# Assign a number into a variable and check if the number is Even.
'''
Multi Line Comment
'''
my_number = 452

if my_number % 2 == 0:
    print(my_number, ' is an Even number')
----------------------------
p2.py
# Read a number from the user and check if it is an Even number or not.

# To read data from the console, we can use input(). However the input() always reads only a string as usual with all other languages.

# We must 1st cast(convert) the string into a number(specifically an int)
# The input(), not just reads a string but also can print a string
my_number = int(input('Enter a number to check if it is Even or not: '))

# To check the data-type of a variable use type()
print(type(my_number))

if my_number % 2 == 0:
    print(my_number, 'is an Even number')
else:
    print(f'{my_number} is not an Even number')

-------------------------------------------------
p3.py
'''
Accept a number as input, say X and define a logic to get the output say Y. The Input can be only 0 or 1 and the output must be 1 if input is 0 and viceversa.
Do not use Boolean Algebra.
'''

X = int(input('Enter the input number(0 or 1 Only): '))

# Check if the i/p is valid

Y = 1 - X
print(f'Input number = {X}, Output Number = {Y}')

'''
# if X == 0 or X == 1:
if X >= 0 and X <= 1:
    # solution
    pass
else:
    # print invalid input
    pass
'''
-----------------------------------------
p4.py

# Program to Accept 3 distinct numbers and find smallest among them.

input_num1 = int(input('Enter  first number: '))
input_num2 = int(input('Enter second number: '))
input_num3 = int(input('Enter  third number: '))

# check if valid input

if input_num1 < input_num2 and input_num1 < input_num3:
    print(f'{input_num1} is smallest')
elif input_num2 < input_num3:
    print(f'{input_num2} is smallest')
else:
    print(f'{input_num3} is smallest')
---------------------------------------
In the case of AND, put that condition 1st which has highest probability to fail.
c1 and c2 and c3 ...... and c10
	do this job-1
In the case of OR, put that condition 1st which has highest probability to succeed.
c1 or c2 or c3 or c4
---------------------------------------------
if avg_score >= 0 and avg_score <= 49:

if avg_score <= 49 and avg_score >= 0:

The above stmt can also be written as:

if avg_score > -1 and avg_score < 50:

Relational Operators:
> < >= <= == !=

https://github.com/neelmyna/python_kleit2024

p6.py
Program to check if the alphabet is uppercase

p7.py
Program to check if a number is Perfect Square

p8.py
Program to check if user given year is a Leap year.

p9.py (Loop)
Program to Print Math table of a number

p10.py
Program to check if the alphabet is Vowel or Consonant
-------------------------------------
day3
loops, array and string problem solving and pdb
day4
python built in DS and pdb
Hacker Rank problem solving
day5
mysql DB
day6
DB connectivity and project using python
day7
assessment and left overs
day8
numpy
day9
numpy and pandas
day10
numpy, pandas and matplotlib
day11
problem solving on numpy, pandas and matplotlib
day12
mini project and final assessment
-------------------------------------------------
DAY3 WEDNESDAY 21-08-2024

range()

range(number) with 1 Arg
Here the default start value is 0 and goes upto number-1 with a default increment of 1
range(5) 0 .... 4
[0, 5)

range(startNumber, endNumber) with 2 Args
Here the start value is startNumber and goes upto endNumber-1 with a default increment of 1
range(10, 20)
Starts from 10 and goes upto 19
[10, 20)

range(startNumber, endNumber, increment) with 3 Args
Here the start value is startNumber and goes upto endNumber-1 with the given increment
range(10, 40, 3)
10, 13, 16, 19, 22, 25, 28, 31, 34, 37

range(40, 25, -2)
Starts from 40 goes upto 11 with increment of -2 or decrement of 2.
40, 38, 36, 34, 32, 30, 28, 26

[10, 20]
Closed Interval where end points are included
num >= 10 and num <= 20

(30, 50)
Open Interval, where end points are excluded
num > 30 and num < 50

[25, 50)
Right Open
num >= 25 and num < 50

# p9 Program to Print Math table of a number

input_num = int(input('Enter a number to print its Math table: '))

for i in range(1, 16):
    #print(input_num, '*', i, '=', input_num*i)
    print('%02d * %02d = %03d'%(input_num, i, input_num*i))
-----------------------------------------------------
p11.py
Program to Find Sum of digits of a number
p12
Program to Find count of digits of a number
p13
Program to find biggest (smallest) digit in a number
p14
Program to find 2nd smallest digit in a number
p15
Program to find Sum of even(odd) digits in a number
p16
Program to reverse a number
p17
Program to Find Odd(Even) placed digits in a number
p18
Program to Find Odd placed Even digits in a number
p19
Program to print the Right angled Triangle of N lines
*
**
***
****
*****
p20
Program to print the Equi Lateral Triangle of N lines
    *
   ***
  *****
 *******
*********
p21
Program to print a Hollow Square of N lines
p22
Program tp print X shape of N lines
p23
Program to Print X shape inside Hollow Square
p24
Check if a number is Prime
p25
Assume 1 and 2 are 1st 2 terms of the series and print the 1st N term of Fibo series (HemaChandra numbers)
p26*
Find the Nth Prime number
p27*
Find Nth Fibo term (assume 1 and 2 as 1st 2 terms)
p28*
Print Prime numbers between M and N (M < N)
p29
Find sum of the series: n + n(2) + n(3) + ..... m terms
p30
Find sum of the series: 1 - n + n2 - n3 .... m terms
p31*
Find sum of the sries: n - n2/3 + n4/5 - n8/7 .... m terms (1<m<10)
p32*
Find Factorial of a number using rescursive function
p33
Find Nth term of the series:
1 2 2 3 3 5 5 7 8 11 13 13
------------------------------------------------------
HOW TO SOLVE A PROBLEM:

1. Understand the problem statement. Note down the I/P and the required information. Isolate and discard the unwanted information and data if any. Recognise what should be the O/P

Outcome:
We get to know the exact I/P and the O/P and the direct question.

2. Find the solution using Trial and Error method or if you know any Mathematical formula to solve the problem or using any specific method. Progragramitical solution is not required at this step.

Outcome: We know a possible solution for the giveen problem.

3. Write the Algorithm for the solution we found
An Algorithm is step by step procedure to solve a problem
Every step must be atomic (must solve only one problem at at time)
Every step must be Finite and unambigious.
Outcome: Exact solution with a particular efficiency is built.

4. Write the pseudocode (Fake code)
Advantage: No need of facing the burden of syntax.
Outcome: A solution that looks almost like a code is ready.

5. Code it (Translate the pseudocode in a particular language syntax)
Outcome: The Code is ready

6. Debug the solution, Optimize the solution and apply the code for necessary constraints.
-----------------------------------------
important Math functions:

floor()
Simply truncate the decimal part and the integer you get is the result
floor(7.0) is 7
floor(7.0999) is 7

ciel()
If the decimal part is anything other than 0, then jump to the next descrete/integer number
ciel(7.0) is 7
ciel(7.001) is 8
ciel(7.999) is 8

round()
round(7.0) is 7
round(7.4999) is 7
round(7.5) is 8
round(7.9999) is 8
----------------------------------------
p7
1.  Done

2. Solution
40   6.4   6   36
25   5.0   5   25
50   7.1   7   49

3. 
Algorithm
Read input_number
root_num = root(input_number)
root_num = floor(root_num)
product = root_num * root_num
if product == input_number then
    print input_number is P S
else
    print input_number is not a P S

'''
Read input_number
root_num = root(input_number)
root_num = floor(root_num)
product = root_num * root_num
if product == input_number then
    print input_number is P S
else
    print input_number is not a P S
'''
import math

input_num = int(input('Enter a number to check if it is Perfect Square: '))
root_number = input_num ** 0.5
# root_number = math.sqrt(input_number)
root_number = math.floor(root_number) # int(root_number)
if root_number * root_number == input_num:
    print(f'{input_num} is a Perfect Square')
else:
    print(f'{input_num} is not a Perfect Square')
--------------------------------------------------
OPERATORS:
Arithmetic Operators:
+ - * / % ** //

I/P are numbers
O/P is number
All are binary operators (takes 2 operands)
Infix notation is used (place the operator inbetween operands)
5 + (-8)
5 + 7.88
When performing any Arithmetic operation, the DT of both the operands must be same.
All the operators except ** has Left to Right Associtivity.
x + y
Here, the value of x is feteched 1st and then y
x + y - z
Here, x+y is performed 1st
However, if the precedence of operator is higher then, it is performed 1st even if the operation comes later in the expression.
x - y % z
Here, y % z is performed 1st, because % has higher precedence than minus
----------------------------------------
RELATIONAL OPERATORS: > < >= <= == !=
I/P are numbers
O/P is Boolean
Infix notation
Left to right associtivity

------------------------------------------
LOGICAL OPERATORS: and or not (C/C++: & && | || !)
I/P are Boolean value
O/P is Boolean
Infix notation (binary operators)
prefix notation (unary operator)
Example: not variable
-----------------------------------
southern_capital_cities = {chennai, tiruvanantapuram, panjim, bengaluru, hyderabad}

cities is correct
capital_cities is more correct
southern_capital_cities is perfect (Most specialized)
-------------------------------------------------
p14

N=67329
s2=9
s1=9
loop_itr=1
	d=9
	N=6732
loop_itr=2
	d=2
	s1=2
	N=673
loop_itr=3
	d=3
	N=67
	s2=3
loop_itr=4
	d=7
	N=6
loop_itr=5
	d=6
	N=0
# p14 Find 2nd smallest digit in a number
'''
Read N
small_digit = 9
smallest_digit = 9
Until N has digits
    fetch last digit into D
    remove the unit place digit from N
    if D < smallest_digit then:
        smallest_digit = D
    if D > smallest_digit and D < small_digit:
        small_digit = D
print small_digit as result 

'''
input_number = int(input('Enter a number to find 2nd smallest digit in it: '))

temp_number = input_number
small_digit = 9
smallest_digit = 9
while input_number != 0:
    digit = input_number % 10 # fetch last digit
    input_number = input_number // 10 #remove last digit
    if smallest_digit > digit:
        small_digit = smallest_digit
        smallest_digit = digit
    elif digit < small_digit:
        small_digit = digit
print(f'2nd smallest digit in {temp_number} is {small_digit}')
-----------------------------------------------------
DAY4 THURSDAY 22-08-2024

Built In Functions in Python
len()
min()
max()
sorted()
type()
sum()

string class in Python
my_name = 'chandramoulehwar'

print(my_name.upper()) #prints the string in uppercase. The original string is not modified(because strings are immutable)
print(my_name.capitalize())#Only 1st char is upper
print(len(my_name))
print(my_name.endswith('war'))
print(my_name.endswith('kar'))
print(my_name.startswith('Chandra'))
print(my_name.count('a'))
print(my_name.count('r', 10))
print(my_name.count('a', 3, 15))
print(my_name.find('puram'))
-----------------------------------------
What is pass in Python?
To skip the body of a block (if block, loop block, function block)

for i in range(10, 20):
	pass
	
What is None in Python ?
None is similar to null of Java where it represents no value or emptyness.

For example, the print() function in Python returns nothing, which is technically represented as None

for i in range(10):
	print(i, end=' ')
	i = i+1 # i++

O/P: 0 2 4 6 8  (WRONG)
O/P: 0 1 2 3 4 5 6 7 8 9 (CORRECT)

Why ++ and -- are not available in Python?
Why there is no implicit cast in Python?
Why there is no Function Overloading in Python?
-------------------------------------------------
my_name = 'tiruvanantapuram'
print(my_name.find('puram'))
print(my_name.find('ananta'))
print(my_name.find('trivandrum'))
print(my_name.find('ananta', 5))
print(my_name.find('ananta', 5, 10))
print(my_name.find('ananta', 5, 11))
print(my_name.index('d'))
print(my_name.find('a', 6))
-------------------------------------------
In Python, though the string objects are immutable, we can index them, i.e., strings are ordered.

my_str = 'siddharoodha'

print(my_str[0])
print(my_str[-1])
print(my_str[2])
print(my_str[-2])
print(my_str[-12])
print(my_str[11])
print(my_str[-13])
-----------------------------------------
String Slicing:
my_str = 'siddharoodha'

print(my_str[:])
print(my_str[::])
print(my_str[1:6])
print(my_str[2:9:2])
print(my_str[1:16])
print(my_str[:9:-1])
print(my_str[9:5:-1])
print(my_str[::-1])
------------------------------
my_str = 'siddharoodha'
print(my_str.index('a'))
print(my_str.find('a'))
------------------------------
my_function(val1, val2) # We must send only 2 values to this function

num1 = 40
num2 = 60
print('Before Swapping, Num1=' + str(num1) + ', Num2=' + str(num2))
num1 , num2 = num2, num1
print('After Swapping, Num1=' + str(num1) + ', Num2=' + str(num2))
print(num3)  NameError , because num3 is not defined
-------------------------------------------------------
Functions in Python:
def my_function():
    print('From my function')

my_function()
----------------
def my_function(num1, num2):
    return num1 + num2

sum = my_function(10, 20)
print(f'Sum = {sum}')
---------------------------
Default Args:

def my_function(num1 = 70, num2 = 90):
    return num1 + num2

sum1 = my_function(10, 20)
print(f'Sum = {sum1}')

sum2 = my_function(25)
print(f'Sum = {sum2}')

sum3 = my_function()
print(f'Sum = {sum3}')
------------------------------
Named Arguments:
def my_function(num1 = 70, num2 = 90):
    print(f'Num1={num1}, Num2={num2}')
    return num1 + num2

sum1 = my_function(num2 = 10, num1 = 20)
print(f'Sum = {sum1}')
----------------------------
Var Arg Function
def my_function(*numbers):
    print(numbers)
    print(sum(numbers), '\n')

my_function(7)
my_function(2, 3, 5, 7)
my_function(11, 19)
my_function()
-------------------------------------
p26*
Find the Nth Prime number
p27*
Find Nth Fibo term (assume 1 and 2 as 1st 2 terms)



